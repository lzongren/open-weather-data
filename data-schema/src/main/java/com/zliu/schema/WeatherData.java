/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.zliu.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WeatherData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4191312144265088900L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WeatherData\",\"namespace\":\"com.zliu.schema\",\"fields\":[{\"name\":\"coord\",\"type\":{\"type\":\"record\",\"name\":\"Coordinate\",\"fields\":[{\"name\":\"lon\",\"type\":\"double\"},{\"name\":\"lat\",\"type\":\"double\"}]}},{\"name\":\"weather\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Weather\",\"fields\":[{\"name\":\"id\",\"type\":\"double\"},{\"name\":\"main\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"icon\",\"type\":\"string\"}]}}},{\"name\":\"base\",\"type\":\"string\"},{\"name\":\"main\",\"type\":{\"type\":\"record\",\"name\":\"Main\",\"fields\":[{\"name\":\"temp\",\"type\":\"double\"},{\"name\":\"pressure\",\"type\":\"double\"},{\"name\":\"humidity\",\"type\":\"double\"},{\"name\":\"temp_min\",\"type\":\"double\"},{\"name\":\"temp_max\",\"type\":\"double\"}]}},{\"name\":\"wind\",\"type\":{\"type\":\"record\",\"name\":\"Wind\",\"fields\":[{\"name\":\"speed\",\"type\":\"double\"},{\"name\":\"deg\",\"type\":\"double\"}]}},{\"name\":\"clouds\",\"type\":{\"type\":\"record\",\"name\":\"Cloud\",\"fields\":[{\"name\":\"all\",\"type\":\"double\"}]}},{\"name\":\"dt\",\"type\":\"double\"},{\"name\":\"sys\",\"type\":{\"type\":\"record\",\"name\":\"Sys\",\"fields\":[{\"name\":\"type\",\"type\":\"double\"},{\"name\":\"id\",\"type\":\"double\"},{\"name\":\"message\",\"type\":\"double\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"sunrise\",\"type\":\"double\"},{\"name\":\"sunset\",\"type\":\"double\"}]}},{\"name\":\"id\",\"type\":\"double\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"cod\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.zliu.schema.Coordinate coord;
  @Deprecated public java.util.List<com.zliu.schema.Weather> weather;
  @Deprecated public java.lang.CharSequence base;
  @Deprecated public com.zliu.schema.Main main;
  @Deprecated public com.zliu.schema.Wind wind;
  @Deprecated public com.zliu.schema.Cloud clouds;
  @Deprecated public double dt;
  @Deprecated public com.zliu.schema.Sys sys;
  @Deprecated public double id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public double cod;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WeatherData() {}

  /**
   * All-args constructor.
   * @param coord The new value for coord
   * @param weather The new value for weather
   * @param base The new value for base
   * @param main The new value for main
   * @param wind The new value for wind
   * @param clouds The new value for clouds
   * @param dt The new value for dt
   * @param sys The new value for sys
   * @param id The new value for id
   * @param name The new value for name
   * @param cod The new value for cod
   */
  public WeatherData(com.zliu.schema.Coordinate coord, java.util.List<com.zliu.schema.Weather> weather, java.lang.CharSequence base, com.zliu.schema.Main main, com.zliu.schema.Wind wind, com.zliu.schema.Cloud clouds, java.lang.Double dt, com.zliu.schema.Sys sys, java.lang.Double id, java.lang.CharSequence name, java.lang.Double cod) {
    this.coord = coord;
    this.weather = weather;
    this.base = base;
    this.main = main;
    this.wind = wind;
    this.clouds = clouds;
    this.dt = dt;
    this.sys = sys;
    this.id = id;
    this.name = name;
    this.cod = cod;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return coord;
    case 1: return weather;
    case 2: return base;
    case 3: return main;
    case 4: return wind;
    case 5: return clouds;
    case 6: return dt;
    case 7: return sys;
    case 8: return id;
    case 9: return name;
    case 10: return cod;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: coord = (com.zliu.schema.Coordinate)value$; break;
    case 1: weather = (java.util.List<com.zliu.schema.Weather>)value$; break;
    case 2: base = (java.lang.CharSequence)value$; break;
    case 3: main = (com.zliu.schema.Main)value$; break;
    case 4: wind = (com.zliu.schema.Wind)value$; break;
    case 5: clouds = (com.zliu.schema.Cloud)value$; break;
    case 6: dt = (java.lang.Double)value$; break;
    case 7: sys = (com.zliu.schema.Sys)value$; break;
    case 8: id = (java.lang.Double)value$; break;
    case 9: name = (java.lang.CharSequence)value$; break;
    case 10: cod = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'coord' field.
   * @return The value of the 'coord' field.
   */
  public com.zliu.schema.Coordinate getCoord() {
    return coord;
  }

  /**
   * Sets the value of the 'coord' field.
   * @param value the value to set.
   */
  public void setCoord(com.zliu.schema.Coordinate value) {
    this.coord = value;
  }

  /**
   * Gets the value of the 'weather' field.
   * @return The value of the 'weather' field.
   */
  public java.util.List<com.zliu.schema.Weather> getWeather() {
    return weather;
  }

  /**
   * Sets the value of the 'weather' field.
   * @param value the value to set.
   */
  public void setWeather(java.util.List<com.zliu.schema.Weather> value) {
    this.weather = value;
  }

  /**
   * Gets the value of the 'base' field.
   * @return The value of the 'base' field.
   */
  public java.lang.CharSequence getBase() {
    return base;
  }

  /**
   * Sets the value of the 'base' field.
   * @param value the value to set.
   */
  public void setBase(java.lang.CharSequence value) {
    this.base = value;
  }

  /**
   * Gets the value of the 'main' field.
   * @return The value of the 'main' field.
   */
  public com.zliu.schema.Main getMain() {
    return main;
  }

  /**
   * Sets the value of the 'main' field.
   * @param value the value to set.
   */
  public void setMain(com.zliu.schema.Main value) {
    this.main = value;
  }

  /**
   * Gets the value of the 'wind' field.
   * @return The value of the 'wind' field.
   */
  public com.zliu.schema.Wind getWind() {
    return wind;
  }

  /**
   * Sets the value of the 'wind' field.
   * @param value the value to set.
   */
  public void setWind(com.zliu.schema.Wind value) {
    this.wind = value;
  }

  /**
   * Gets the value of the 'clouds' field.
   * @return The value of the 'clouds' field.
   */
  public com.zliu.schema.Cloud getClouds() {
    return clouds;
  }

  /**
   * Sets the value of the 'clouds' field.
   * @param value the value to set.
   */
  public void setClouds(com.zliu.schema.Cloud value) {
    this.clouds = value;
  }

  /**
   * Gets the value of the 'dt' field.
   * @return The value of the 'dt' field.
   */
  public java.lang.Double getDt() {
    return dt;
  }

  /**
   * Sets the value of the 'dt' field.
   * @param value the value to set.
   */
  public void setDt(java.lang.Double value) {
    this.dt = value;
  }

  /**
   * Gets the value of the 'sys' field.
   * @return The value of the 'sys' field.
   */
  public com.zliu.schema.Sys getSys() {
    return sys;
  }

  /**
   * Sets the value of the 'sys' field.
   * @param value the value to set.
   */
  public void setSys(com.zliu.schema.Sys value) {
    this.sys = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Double getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Double value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'cod' field.
   * @return The value of the 'cod' field.
   */
  public java.lang.Double getCod() {
    return cod;
  }

  /**
   * Sets the value of the 'cod' field.
   * @param value the value to set.
   */
  public void setCod(java.lang.Double value) {
    this.cod = value;
  }

  /**
   * Creates a new WeatherData RecordBuilder.
   * @return A new WeatherData RecordBuilder
   */
  public static com.zliu.schema.WeatherData.Builder newBuilder() {
    return new com.zliu.schema.WeatherData.Builder();
  }

  /**
   * Creates a new WeatherData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WeatherData RecordBuilder
   */
  public static com.zliu.schema.WeatherData.Builder newBuilder(com.zliu.schema.WeatherData.Builder other) {
    return new com.zliu.schema.WeatherData.Builder(other);
  }

  /**
   * Creates a new WeatherData RecordBuilder by copying an existing WeatherData instance.
   * @param other The existing instance to copy.
   * @return A new WeatherData RecordBuilder
   */
  public static com.zliu.schema.WeatherData.Builder newBuilder(com.zliu.schema.WeatherData other) {
    return new com.zliu.schema.WeatherData.Builder(other);
  }

  /**
   * RecordBuilder for WeatherData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WeatherData>
    implements org.apache.avro.data.RecordBuilder<WeatherData> {

    private com.zliu.schema.Coordinate coord;
    private com.zliu.schema.Coordinate.Builder coordBuilder;
    private java.util.List<com.zliu.schema.Weather> weather;
    private java.lang.CharSequence base;
    private com.zliu.schema.Main main;
    private com.zliu.schema.Main.Builder mainBuilder;
    private com.zliu.schema.Wind wind;
    private com.zliu.schema.Wind.Builder windBuilder;
    private com.zliu.schema.Cloud clouds;
    private com.zliu.schema.Cloud.Builder cloudsBuilder;
    private double dt;
    private com.zliu.schema.Sys sys;
    private com.zliu.schema.Sys.Builder sysBuilder;
    private double id;
    private java.lang.CharSequence name;
    private double cod;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.zliu.schema.WeatherData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.coord)) {
        this.coord = data().deepCopy(fields()[0].schema(), other.coord);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCoordBuilder()) {
        this.coordBuilder = com.zliu.schema.Coordinate.newBuilder(other.getCoordBuilder());
      }
      if (isValidValue(fields()[1], other.weather)) {
        this.weather = data().deepCopy(fields()[1].schema(), other.weather);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.base)) {
        this.base = data().deepCopy(fields()[2].schema(), other.base);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.main)) {
        this.main = data().deepCopy(fields()[3].schema(), other.main);
        fieldSetFlags()[3] = true;
      }
      if (other.hasMainBuilder()) {
        this.mainBuilder = com.zliu.schema.Main.newBuilder(other.getMainBuilder());
      }
      if (isValidValue(fields()[4], other.wind)) {
        this.wind = data().deepCopy(fields()[4].schema(), other.wind);
        fieldSetFlags()[4] = true;
      }
      if (other.hasWindBuilder()) {
        this.windBuilder = com.zliu.schema.Wind.newBuilder(other.getWindBuilder());
      }
      if (isValidValue(fields()[5], other.clouds)) {
        this.clouds = data().deepCopy(fields()[5].schema(), other.clouds);
        fieldSetFlags()[5] = true;
      }
      if (other.hasCloudsBuilder()) {
        this.cloudsBuilder = com.zliu.schema.Cloud.newBuilder(other.getCloudsBuilder());
      }
      if (isValidValue(fields()[6], other.dt)) {
        this.dt = data().deepCopy(fields()[6].schema(), other.dt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sys)) {
        this.sys = data().deepCopy(fields()[7].schema(), other.sys);
        fieldSetFlags()[7] = true;
      }
      if (other.hasSysBuilder()) {
        this.sysBuilder = com.zliu.schema.Sys.newBuilder(other.getSysBuilder());
      }
      if (isValidValue(fields()[8], other.id)) {
        this.id = data().deepCopy(fields()[8].schema(), other.id);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.name)) {
        this.name = data().deepCopy(fields()[9].schema(), other.name);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.cod)) {
        this.cod = data().deepCopy(fields()[10].schema(), other.cod);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WeatherData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.zliu.schema.WeatherData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.coord)) {
        this.coord = data().deepCopy(fields()[0].schema(), other.coord);
        fieldSetFlags()[0] = true;
      }
      this.coordBuilder = null;
      if (isValidValue(fields()[1], other.weather)) {
        this.weather = data().deepCopy(fields()[1].schema(), other.weather);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.base)) {
        this.base = data().deepCopy(fields()[2].schema(), other.base);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.main)) {
        this.main = data().deepCopy(fields()[3].schema(), other.main);
        fieldSetFlags()[3] = true;
      }
      this.mainBuilder = null;
      if (isValidValue(fields()[4], other.wind)) {
        this.wind = data().deepCopy(fields()[4].schema(), other.wind);
        fieldSetFlags()[4] = true;
      }
      this.windBuilder = null;
      if (isValidValue(fields()[5], other.clouds)) {
        this.clouds = data().deepCopy(fields()[5].schema(), other.clouds);
        fieldSetFlags()[5] = true;
      }
      this.cloudsBuilder = null;
      if (isValidValue(fields()[6], other.dt)) {
        this.dt = data().deepCopy(fields()[6].schema(), other.dt);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sys)) {
        this.sys = data().deepCopy(fields()[7].schema(), other.sys);
        fieldSetFlags()[7] = true;
      }
      this.sysBuilder = null;
      if (isValidValue(fields()[8], other.id)) {
        this.id = data().deepCopy(fields()[8].schema(), other.id);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.name)) {
        this.name = data().deepCopy(fields()[9].schema(), other.name);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.cod)) {
        this.cod = data().deepCopy(fields()[10].schema(), other.cod);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'coord' field.
      * @return The value.
      */
    public com.zliu.schema.Coordinate getCoord() {
      return coord;
    }

    /**
      * Sets the value of the 'coord' field.
      * @param value The value of 'coord'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setCoord(com.zliu.schema.Coordinate value) {
      validate(fields()[0], value);
      this.coordBuilder = null;
      this.coord = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'coord' field has been set.
      * @return True if the 'coord' field has been set, false otherwise.
      */
    public boolean hasCoord() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'coord' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.zliu.schema.Coordinate.Builder getCoordBuilder() {
      if (coordBuilder == null) {
        if (hasCoord()) {
          setCoordBuilder(com.zliu.schema.Coordinate.newBuilder(coord));
        } else {
          setCoordBuilder(com.zliu.schema.Coordinate.newBuilder());
        }
      }
      return coordBuilder;
    }

    /**
     * Sets the Builder instance for the 'coord' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.zliu.schema.WeatherData.Builder setCoordBuilder(com.zliu.schema.Coordinate.Builder value) {
      clearCoord();
      coordBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coord' field has an active Builder instance
     * @return True if the 'coord' field has an active Builder instance
     */
    public boolean hasCoordBuilder() {
      return coordBuilder != null;
    }

    /**
      * Clears the value of the 'coord' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearCoord() {
      coord = null;
      coordBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'weather' field.
      * @return The value.
      */
    public java.util.List<com.zliu.schema.Weather> getWeather() {
      return weather;
    }

    /**
      * Sets the value of the 'weather' field.
      * @param value The value of 'weather'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setWeather(java.util.List<com.zliu.schema.Weather> value) {
      validate(fields()[1], value);
      this.weather = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'weather' field has been set.
      * @return True if the 'weather' field has been set, false otherwise.
      */
    public boolean hasWeather() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'weather' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearWeather() {
      weather = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'base' field.
      * @return The value.
      */
    public java.lang.CharSequence getBase() {
      return base;
    }

    /**
      * Sets the value of the 'base' field.
      * @param value The value of 'base'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setBase(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.base = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'base' field has been set.
      * @return True if the 'base' field has been set, false otherwise.
      */
    public boolean hasBase() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'base' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearBase() {
      base = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'main' field.
      * @return The value.
      */
    public com.zliu.schema.Main getMain() {
      return main;
    }

    /**
      * Sets the value of the 'main' field.
      * @param value The value of 'main'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setMain(com.zliu.schema.Main value) {
      validate(fields()[3], value);
      this.mainBuilder = null;
      this.main = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'main' field has been set.
      * @return True if the 'main' field has been set, false otherwise.
      */
    public boolean hasMain() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'main' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.zliu.schema.Main.Builder getMainBuilder() {
      if (mainBuilder == null) {
        if (hasMain()) {
          setMainBuilder(com.zliu.schema.Main.newBuilder(main));
        } else {
          setMainBuilder(com.zliu.schema.Main.newBuilder());
        }
      }
      return mainBuilder;
    }

    /**
     * Sets the Builder instance for the 'main' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.zliu.schema.WeatherData.Builder setMainBuilder(com.zliu.schema.Main.Builder value) {
      clearMain();
      mainBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'main' field has an active Builder instance
     * @return True if the 'main' field has an active Builder instance
     */
    public boolean hasMainBuilder() {
      return mainBuilder != null;
    }

    /**
      * Clears the value of the 'main' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearMain() {
      main = null;
      mainBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'wind' field.
      * @return The value.
      */
    public com.zliu.schema.Wind getWind() {
      return wind;
    }

    /**
      * Sets the value of the 'wind' field.
      * @param value The value of 'wind'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setWind(com.zliu.schema.Wind value) {
      validate(fields()[4], value);
      this.windBuilder = null;
      this.wind = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'wind' field has been set.
      * @return True if the 'wind' field has been set, false otherwise.
      */
    public boolean hasWind() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'wind' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.zliu.schema.Wind.Builder getWindBuilder() {
      if (windBuilder == null) {
        if (hasWind()) {
          setWindBuilder(com.zliu.schema.Wind.newBuilder(wind));
        } else {
          setWindBuilder(com.zliu.schema.Wind.newBuilder());
        }
      }
      return windBuilder;
    }

    /**
     * Sets the Builder instance for the 'wind' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.zliu.schema.WeatherData.Builder setWindBuilder(com.zliu.schema.Wind.Builder value) {
      clearWind();
      windBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'wind' field has an active Builder instance
     * @return True if the 'wind' field has an active Builder instance
     */
    public boolean hasWindBuilder() {
      return windBuilder != null;
    }

    /**
      * Clears the value of the 'wind' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearWind() {
      wind = null;
      windBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'clouds' field.
      * @return The value.
      */
    public com.zliu.schema.Cloud getClouds() {
      return clouds;
    }

    /**
      * Sets the value of the 'clouds' field.
      * @param value The value of 'clouds'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setClouds(com.zliu.schema.Cloud value) {
      validate(fields()[5], value);
      this.cloudsBuilder = null;
      this.clouds = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'clouds' field has been set.
      * @return True if the 'clouds' field has been set, false otherwise.
      */
    public boolean hasClouds() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'clouds' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.zliu.schema.Cloud.Builder getCloudsBuilder() {
      if (cloudsBuilder == null) {
        if (hasClouds()) {
          setCloudsBuilder(com.zliu.schema.Cloud.newBuilder(clouds));
        } else {
          setCloudsBuilder(com.zliu.schema.Cloud.newBuilder());
        }
      }
      return cloudsBuilder;
    }

    /**
     * Sets the Builder instance for the 'clouds' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.zliu.schema.WeatherData.Builder setCloudsBuilder(com.zliu.schema.Cloud.Builder value) {
      clearClouds();
      cloudsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'clouds' field has an active Builder instance
     * @return True if the 'clouds' field has an active Builder instance
     */
    public boolean hasCloudsBuilder() {
      return cloudsBuilder != null;
    }

    /**
      * Clears the value of the 'clouds' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearClouds() {
      clouds = null;
      cloudsBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'dt' field.
      * @return The value.
      */
    public java.lang.Double getDt() {
      return dt;
    }

    /**
      * Sets the value of the 'dt' field.
      * @param value The value of 'dt'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setDt(double value) {
      validate(fields()[6], value);
      this.dt = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'dt' field has been set.
      * @return True if the 'dt' field has been set, false otherwise.
      */
    public boolean hasDt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'dt' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearDt() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sys' field.
      * @return The value.
      */
    public com.zliu.schema.Sys getSys() {
      return sys;
    }

    /**
      * Sets the value of the 'sys' field.
      * @param value The value of 'sys'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setSys(com.zliu.schema.Sys value) {
      validate(fields()[7], value);
      this.sysBuilder = null;
      this.sys = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sys' field has been set.
      * @return True if the 'sys' field has been set, false otherwise.
      */
    public boolean hasSys() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'sys' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.zliu.schema.Sys.Builder getSysBuilder() {
      if (sysBuilder == null) {
        if (hasSys()) {
          setSysBuilder(com.zliu.schema.Sys.newBuilder(sys));
        } else {
          setSysBuilder(com.zliu.schema.Sys.newBuilder());
        }
      }
      return sysBuilder;
    }

    /**
     * Sets the Builder instance for the 'sys' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.zliu.schema.WeatherData.Builder setSysBuilder(com.zliu.schema.Sys.Builder value) {
      clearSys();
      sysBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sys' field has an active Builder instance
     * @return True if the 'sys' field has an active Builder instance
     */
    public boolean hasSysBuilder() {
      return sysBuilder != null;
    }

    /**
      * Clears the value of the 'sys' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearSys() {
      sys = null;
      sysBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Double getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setId(double value) {
      validate(fields()[8], value);
      this.id = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearId() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setName(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.name = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearName() {
      name = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'cod' field.
      * @return The value.
      */
    public java.lang.Double getCod() {
      return cod;
    }

    /**
      * Sets the value of the 'cod' field.
      * @param value The value of 'cod'.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder setCod(double value) {
      validate(fields()[10], value);
      this.cod = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'cod' field has been set.
      * @return True if the 'cod' field has been set, false otherwise.
      */
    public boolean hasCod() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'cod' field.
      * @return This builder.
      */
    public com.zliu.schema.WeatherData.Builder clearCod() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public WeatherData build() {
      try {
        WeatherData record = new WeatherData();
        if (coordBuilder != null) {
          record.coord = this.coordBuilder.build();
        } else {
          record.coord = fieldSetFlags()[0] ? this.coord : (com.zliu.schema.Coordinate) defaultValue(fields()[0]);
        }
        record.weather = fieldSetFlags()[1] ? this.weather : (java.util.List<com.zliu.schema.Weather>) defaultValue(fields()[1]);
        record.base = fieldSetFlags()[2] ? this.base : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (mainBuilder != null) {
          record.main = this.mainBuilder.build();
        } else {
          record.main = fieldSetFlags()[3] ? this.main : (com.zliu.schema.Main) defaultValue(fields()[3]);
        }
        if (windBuilder != null) {
          record.wind = this.windBuilder.build();
        } else {
          record.wind = fieldSetFlags()[4] ? this.wind : (com.zliu.schema.Wind) defaultValue(fields()[4]);
        }
        if (cloudsBuilder != null) {
          record.clouds = this.cloudsBuilder.build();
        } else {
          record.clouds = fieldSetFlags()[5] ? this.clouds : (com.zliu.schema.Cloud) defaultValue(fields()[5]);
        }
        record.dt = fieldSetFlags()[6] ? this.dt : (java.lang.Double) defaultValue(fields()[6]);
        if (sysBuilder != null) {
          record.sys = this.sysBuilder.build();
        } else {
          record.sys = fieldSetFlags()[7] ? this.sys : (com.zliu.schema.Sys) defaultValue(fields()[7]);
        }
        record.id = fieldSetFlags()[8] ? this.id : (java.lang.Double) defaultValue(fields()[8]);
        record.name = fieldSetFlags()[9] ? this.name : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.cod = fieldSetFlags()[10] ? this.cod : (java.lang.Double) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
